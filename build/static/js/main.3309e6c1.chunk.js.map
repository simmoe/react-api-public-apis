{"version":3,"sources":["components/Main.js","serviceWorker.js","index.js"],"names":["Main","props","useState","term","setTerm","img","setImg","className","onSubmit","event","preventDefault","url","fetch","then","response","json","data","images","fixed_height","catch","e","console","log","value","onChange","target","src","alt","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"sLAsCeA,EApCF,SAACC,GAAU,MAEIC,mBAAS,IAFb,mBAEbC,EAFa,KAEPC,EAFO,OAGEF,mBAAS,IAHX,mBAGbG,EAHa,KAGRC,EAHQ,KAqBpB,OACI,yBAAKC,UAAU,QACX,0BAAMC,SAdO,SAACC,GAClBA,EAAMC,iBACN,IACMC,EAAG,iDAA6CR,EAA7C,oBADO,mCACP,YACTS,MAAMD,GACDE,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAG,GACFZ,IACAE,EAAOU,EAAKA,KAAK,GAAGC,OAAOC,aAAaP,QAE3CQ,OAAM,SAAAC,GAAC,OAAIC,QAAQC,IAAI,QAASF,QAK7B,2BAAOG,MAAOpB,EAAMqB,SAnBf,SAACf,GACdL,EAAQK,EAAMgB,OAAOF,UAmBb,4CAEJ,yBAAKhB,UAAU,OACF,KAARF,EACK,yBAAKqB,IAAKrB,EAAKsB,IAAKxB,IACpB,MCpBFyB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAAUC,SAASC,eAAe,SD2H5C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAM1B,MAAK,SAAA2B,GACjCA,EAAaC,iB","file":"static/js/main.3309e6c1.chunk.js","sourcesContent":["import React, {useState} from 'react'\n\nconst Main = (props) => {\n    //state vars\n    const [term, setTerm] = useState('')\n    const [img, setImg] = useState('')\n\n    const onChange = (event) => {\n        setTerm(event.target.value)\n    }\n\n    const handleSubmit = (event) => {\n        event.preventDefault();\n        const api_key = 'xLNiiuCTPYTZA4gHLsiuUk67YYS6K4tz';\n        const url = `https://api.giphy.com/v1/gifs/search?q=${term}&api_key=${api_key}&limit=1`;\n        fetch(url)\n            .then(response => response.json())\n            .then(data => {\n                setTerm()\n                setImg(data.data[0].images.fixed_height.url)\n            })\n            .catch(e => console.log('error', e));\n    }\n    return (\n        <div className=\"page\">\n            <form onSubmit={handleSubmit}>\n                <input value={term} onChange={onChange}/>\n                <button>Search!</button>\n            </form>\n            <div className=\"img\">\n                {img !== \"\"\n                    ? <img src={img} alt={term}/>\n                    : \"\"}\n            </div>\n        </div>\n    )\n}\n\nexport default Main;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport Main from './components/Main';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<Main />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}