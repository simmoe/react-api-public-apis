{"version":3,"sources":["components/Api.js","components/Main.js","serviceWorker.js","index.js"],"names":["Api","props","className","target","rel","href","link","api","description","auth","https","cors","Main","useState","apis","setApis","term","setTerm","cats","setCats","category","setCategory","fetch","then","response","json","data","catch","e","console","log","onSubmit","event","preventDefault","c","encodeURIComponent","t","url","entries","API","onChange","value","map","name","index","key","placeholder","type","row","rowindex","Auth","Cors","HTTPS","Description","Link","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"sLAkBeA,EAhBH,SAACC,GACT,OACI,yBAAKC,UAAU,OACX,uBAAGC,OAAO,SAASC,IAAI,sBAAuBC,KAAMJ,EAAMK,MAC1D,6BACI,4BAAKL,EAAMM,KACX,uBAAGL,UAAU,QAAQD,EAAMO,aACX,KAAfP,EAAMQ,KAAc,0BAAMP,UAAU,QAAhB,WAAwC,0BAAMA,UAAU,QAAQD,EAAMQ,MAC1FR,EAAMS,MAAQ,0BAAMR,UAAU,SAAhB,SAAuC,GACtC,QAAfD,EAAMU,KAAiB,0BAAMT,UAAU,QAAhB,QAAqC,0BAAMA,UAAU,QAAhB,eC6D9DU,EApEF,SAACX,GAAU,MAIGY,mBAAS,IAJZ,mBAIbC,EAJa,KAIRC,EAJQ,OAKGF,mBAAS,IALZ,mBAKbG,EALa,KAKRC,EALQ,OAMIJ,mBAAS,IANb,mBAMbK,EANa,KAMPC,EANO,OAOYN,mBAAS,WAPrB,mBAObO,EAPa,KAOHC,EAPG,KAWpBC,MAAM,yCACDC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAG,GACFP,EAAQO,MAEXC,OAAM,SAAAC,GAAC,OAAIC,QAAQC,IAAI,QAASF,MA8BrC,OACI,yBAAK1B,UAAU,QACX,iDACA,sQACA,0BAAM6B,SApBO,SAACC,GAClBA,EAAMC,iBACN,IAAMC,EAAIC,mBAAmBf,GACvBgB,EAAID,mBAAmBnB,GACvBqB,EAAG,mDAA+CD,EAA/C,qBAA6DF,GACtEL,QAAQC,IAAIO,GAEZf,MAAMe,GACDd,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAG,GAEe,OAAjBA,EAAKY,QAAmBvB,EAAQW,EAAKY,SAAWvB,EAAS,CAAC,CAACwB,IAAI,mBAElEZ,OAAM,SAAAC,GAAC,OAAIC,QAAQC,IAAI,QAASF,QAQ7B,4BAAQY,SA3BH,SAACR,GACdX,EAAYW,EAAM7B,OAAOsC,OACzBxB,EAAQ,MA0BKC,EAAKwB,KAAI,SAACC,EAAMC,GACb,OAAO,4BAAQC,IAAKD,EAAOH,MAAOE,GAAOA,OAGjD,2BAAOG,YAAY,kBAAkBN,SArChC,SAACR,GACdf,EAAQe,EAAM7B,OAAOsC,QAoC4CM,KAAK,OAAOJ,KAAK,GAAGF,MAAOzB,IACpF,2CAEA,6BAASd,UAAU,WACdY,EAAK4B,KAAI,SAACM,EAAKC,GACZ,OAAQ,kBAAC,EAAD,CAAKJ,IAAKI,EAAUxC,KAAMuC,EAAIE,KAAMvC,KAAMqC,EAAIG,KAAMzC,MAAOsC,EAAII,MAAO7C,IAAKyC,EAAIT,IAAK/B,YAAawC,EAAIK,YAAa/C,KAAM0C,EAAIM,aCrDxIC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAAUC,SAASC,eAAe,SD2H5C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAM3C,MAAK,SAAA4C,GACjCA,EAAaC,iB","file":"static/js/main.a93b83ba.chunk.js","sourcesContent":["import React from 'react'\n\nconst Api = (props) => {\n    return(\n        <div className=\"api\">\n            <a target=\"_blank\" rel=\"noopener noreferrer\"  href={props.link}>\n            <div>\n                <h1>{props.api}</h1>\n                <p className=\"desc\">{props.description}</p>\n                {props.auth === \"\" ? <span className=\"auth\">NO-AUTH</span> : <span className=\"auth\">{props.auth}</span>}\n                {props.https ? <span className=\"https\">HTTPS</span> : \"\"}\n                {props.cors === \"yes\" ? <span className=\"cors\">CORS</span> : <span className=\"cors\">NO-CORS</span>}\n            </div>\n            </a>\n        </div>\n    )\n}\n\nexport default Api","import React, {useState} from 'react'\nimport Api from './Api'\n\n\nconst Main = (props) => {\n    // state vars - check with the api docs:\n    //Se https://api.publicapis.org/\n\n    const [apis,setApis] = useState([])\n    const [term,setTerm] = useState('')\n    const [cats, setCats] = useState([])\n    const [category, setCategory] = useState('Animals'); \n\n\n    //Fetch categoris and save in state\n    fetch(`https://api.publicapis.org/categories`)\n        .then(response => response.json())\n        .then(data => {\n            setCats(data)\n        })\n        .catch(e => console.log('error', e));\n    \n    //Set optional search term\n    const onChange = (event) => {\n        setTerm(event.target.value)\n    }\n\n    //Change category and reset search term\n    const onSelect = (event) => {\n        setCategory(event.target.value)\n        setTerm('')\n    }\n\n    //Fetch api data with the category and search term parameters\n    const handleSubmit = (event) => {\n        event.preventDefault();\n        const c = encodeURIComponent(category)\n        const t = encodeURIComponent(term)\n        const url = `https://api.publicapis.org/entries?title=${t}&category=${c}`;\n        console.log(url)\n\n        fetch(url)\n            .then(response => response.json())\n            .then(data => {\n                //console.log(data)\n                data.entries !== null ? setApis(data.entries) : setApis ([{API:'no results'}])\n            })\n            .catch(e => console.log('error', e));\n    }\n\n    return (\n        <div className=\"page\">\n            <h1>Public API search</h1>\n            <p>Looking for an interesting API to use in your project? Use this page to get relevant suggestions for open and free API's all over the internet. Choose a category and hit search, or submit an optional search term to filter results. </p>\n            <form onSubmit={handleSubmit}>\n                <select onChange={onSelect}>\n                    {cats.map((name, index)=>{\n                        return <option key={index} value={name}>{name}</option>\n                    })}\n                </select>\n                <input placeholder=\"term (optional)\" onChange={onChange} type=\"text\" name=\"\" value={term} />\n                <button>Search</button>\n                </form>\n                <section className=\"section\">\n                    {apis.map((row, rowindex) => {\n                        return (<Api key={rowindex} auth={row.Auth} cors={row.Cors} https={row.HTTPS} api={row.API} description={row.Description} link={row.Link}/>)\n                    })}\n                </section>\n            </div>\n    )\n}\n\nexport default Main ","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport Main from './components/Main';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<Main />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}